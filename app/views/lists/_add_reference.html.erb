<%= form_for list.references.build, html: {class: 'form-inline', id: 'add-reference'} do |f| %>
  <%= f.hidden_field :list_id, value: list.id %>
  <div class="add-paper">
    <%= f.fields_for :locator do |l| %>
      <div class="form-group add-reference col-md-12">
        <%= l.hidden_field :type, 'v-bind:value' => 'locatorType' %>
        <i>
          Or add a paper by
          <%= link_to "DOI", '', '@click.prevent': "setLocatorType('doi')" %>,
          <%= link_to "Pubmed ID", '', '@click.prevent': "setLocatorType('pubmed')" %>,
          or <%= link_to "URL", '', '@click.prevent': "setLocatorType('link')" %>
        </i>
        <div class="form-group" v-bind:class='{ hidden: dataHidden }'>
          <%= l.text_field  :id,
                            class: "form-control paper-locator input-sm",
                            'v-bind:placeholder' => 'locatorIdPlaceholder',
                            'v-bind:disabled' => 'dataHidden' %>

          <%= l.text_field  :title,
                            placeholder: 'Required - Paper Title ex: Regulation of the Neural Circuitry of Emotion',
                            class: "form-control paper-title input-sm",
                            'v-bind:class' => '{ hidden: hideTitleField }',
                            'v-bind:disabled' => 'hideTitleField' %>
          <%= f.submit "Submit",
                class: "btn btn-primary btn-xs",
                disabled: !(list.accepts_public_contributions? || current_user_can_edit?(list)) %>
          <%= link_to "cancel", '', '@click.prevent' => 'cancelAdd', 'v-bind:class' => '{ hidden: dataHidden }' %>
        </div>
      </div>
    <% end %>
  </div>
<% end %>

<% content_for(:page_app) do %>
  <script>
    var addReferenceApp = new Vue({
      el: '#add-reference',
      data: {
        locatorType: null,
        placeholderFor: {
          doi: "DOI ex: '10.1371/journal.pone.0001897'",
          pubmed: "Pubmed ID ex: '18365029'",
          link: "URL ex: http://journals.plos.org/plosone/article?id=example"
        }
      },
      methods: {
        setLocatorType: function(refType) {
          this.locatorType = refType;
        },
        cancelAdd: function() {
          this.locatorType = null;
        }
      },
      computed: {
        hideTitleField: function() {
          return !(this.locatorType === 'link')
        },
        locatorIdPlaceholder: function() {
          return this.placeholderFor[this.locatorType]
        },
        dataHidden: function() {
          return !this.locatorType;
        }
      }
    });
  </script>
<% end %>
